<button
  class="theme-toggle"
  id="theme-toggle"
  title="Toggles light & dark"
  aria-label="auto"
  aria-live="polite"
>
  <svg
    class="sun-and-moon"
    aria-hidden="true"
    width="24"
    height="24"
    viewBox="0 0 24 24"
  >
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
    <circle
      class="sun"
      cx="12"
      cy="12"
      r="6"
      mask="url(#moon-mask)"
      fill="currentColor"></circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
  </svg>
</button>

<style is:global>
  * {
    box-sizing: border-box;
    margin: 0;
  }

  :root {
    --ease-elastic-out-3: cubic-bezier(0.5, 1.25, 0.75, 1.25);
    --ease-elastic-3: var(--ease-elastic-out-3);
    --ease-elastic-out-4: cubic-bezier(0.5, 1.5, 0.75, 1.25);
    --ease-elastic-4: var(--ease-elastic-out-4);
    --ease-3: cubic-bezier(0.25, 0, 0.3, 1);
    --ease-out-5: cubic-bezier(0, 0, 0, 1);
  }

  html[data-theme="dark"] {
    background-color: #1e293b;
    color: #fff;
  }

  [data-theme="dark"] .nav-links a {
    color: #fff;
  }

  html {
    --bg-color: #f1f5f9;
    color-scheme: light;
  }

  html[data-theme="dark"] {
    --bg-color: ##1e293b;
    color-scheme: dark;
  }

  @supports not (color-scheme: dark) {
    html[data-theme="dark"] {
      background-color: #1e293b;
    }
  }

  body {
    font-family:
      system-ui,
      -apple-system,
      Segoe UI,
      Roboto,
      Ubuntu,
      Cantarell,
      Noto Sans,
      sans-serif;
    background-color: var(--bg-color);
  }

  .sun-and-moon > :is(.moon, .sun, .sun-beams) {
    transform-origin: center;
  }

  .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill);
  }

  .theme-toggle:is(:hover, :focus-visible) > .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill-hover);
  }

  .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill);
    stroke-width: 2px;
  }

  .theme-toggle:is(:hover, :focus-visible) .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill-hover);
  }

  [data-theme="dark"] .sun-and-moon > .sun {
    transform: scale(1.75);
  }

  [data-theme="dark"] .sun-and-moon > .sun-beams {
    opacity: 0;
  }

  [data-theme="dark"] .sun-and-moon > .moon > circle {
    transform: translate(-7px);
  }

  @supports (cx: 1) {
    [data-theme="dark"] .sun-and-moon > .moon > circle {
      transform: translate(0);
      cx: 17;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .sun-and-moon > .sun {
      transition: transform 0.5s var(--ease-elastic-3);
    }

    .sun-and-moon > .sun-beams {
      transition:
        transform 0.5s var(--ease-elastic-4),
        opacity 0.5s var(--ease-3);
    }

    .sun-and-moon .moon > circle {
      transition: transform 0.25s var(--ease-out-5);
    }

    @supports (cx: 1) {
      .sun-and-moon .moon > circle {
        transition: cx 0.25s var(--ease-out-5);
      }
    }

    [data-theme="dark"] .sun-and-moon > .sun {
      transform: scale(1.75);
      transition-timing-function: var(--ease-3);
      transition-duration: 0.25s;
    }

    [data-theme="dark"] .sun-and-moon > .sun-beams {
      transform: rotate(-25deg);
      transition-duration: 0.15s;
    }

    [data-theme="dark"] .sun-and-moon > .moon > circle {
      transition-delay: 0.25s;
      transition-duration: 0.5s;
    }
  }

  .theme-toggle {
    --size: 2rem;
    --icon-fill: hsl(210 10% 30%);
    --icon-fill-hover: hsl(210 10% 15%);
    background: none;
    border: none;
    padding: 0;
    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    outline-offset: 5px;
  }

  .theme-toggle > svg {
    inline-size: 100%;
    block-size: 100%;
    stroke-linecap: round;
  }

  [data-theme="dark"] .theme-toggle {
    --icon-fill: hsl(210 10% 70%);
    --icon-fill-hover: hsl(210 15% 90%);
  }

  @media (hover: none) {
    .theme-toggle {
      --size: 48px;
    }
  }
</style>

<script is:inline>
  const storageKey = "theme-preference";

  const onClick = () => {
    // flip current value
    theme.value = theme.value === "light" ? "dark" : "light";

    setPreference();
  };

  const getColorPreference = () => {
    if (localStorage.getItem(storageKey))
      return localStorage.getItem(storageKey);
    else
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
  };

  const setPreference = () => {
    localStorage.setItem(storageKey, theme.value);
    reflectPreference();
  };

  const reflectPreference = () => {
    document.firstElementChild.setAttribute("data-theme", theme.value);

    document
      .querySelector("#theme-toggle")
      ?.setAttribute("aria-label", theme.value);
  };

  const theme = {
    value: getColorPreference(),
  };

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  window.onload = () => {
    // set on load so screen readers can see latest value on the button
    reflectPreference();

    // now this script can find and listen for clicks on the control
    document.querySelector("#theme-toggle").addEventListener("click", onClick);
  };

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      theme.value = isDark ? "dark" : "light";
      setPreference();
    });
</script>
